using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RT.Util.ExtensionMethods;
using System.Reflection;
using NUnit.Framework;
using System.IO;
using System.Text.RegularExpressions;

namespace RT.Util
{
    static class UtilTests
    {
        static void Main(string[] args)
        {
            if (false)
            {
                Testing.GenerateTestingCode(@"..\..\main\common\Util\UtilTests.cs", "Run Tests", Assembly.GetExecutingAssembly().GetExportedTypes(),
                    typeof(TestFixtureAttribute), typeof(TestFixtureSetUpAttribute), typeof(TestAttribute), typeof(TestFixtureTearDownAttribute));
            }
            else
            {
                #region Run Tests
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.CmdLineTests");
                var test1 = new RT.Util.CmdLineTests();
                Console.WriteLine("-- Running test: TestCmdLineParser");
                test1.TestCmdLineParser();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.CollectionExtensionsTests");
                var test2 = new RT.Util.ExtensionMethods.CollectionExtensionsTests();
                Console.WriteLine("-- Running test: TestBinarySearch");
                test2.TestBinarySearch();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.DateTimeExtensionsTests");
                var test3 = new RT.Util.ExtensionMethods.DateTimeExtensionsTests();
                Console.WriteLine("-- Running test: TestGetNanoseconds");
                test3.TestGetNanoseconds();
                Console.WriteLine("-- Running test: TestToIsoStringUtc");
                test3.TestToIsoStringUtc();
                Console.WriteLine("-- Running test: TestToIsoStringUnspecified");
                test3.TestToIsoStringUnspecified();
                Console.WriteLine("-- Running test: TestToIsoStringLocal");
                test3.TestToIsoStringLocal();
                Console.WriteLine("-- Running test: TestTryParseIsoUtc");
                test3.TestTryParseIsoUtc();
                Console.WriteLine("-- Running test: TestTryParseIsoUnspecified");
                test3.TestTryParseIsoUnspecified();
                Console.WriteLine("-- Running test: TestTryParseIsoLocal");
                test3.TestTryParseIsoLocal();
                Console.WriteLine("-- Running test: TestTruncated");
                test3.TestTruncated();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Geometry.GeomUtTests");
                var test4 = new RT.Util.Geometry.GeomUtTests();
                Console.WriteLine("-- Running test: TestNormalizedAngle");
                test4.TestNormalizedAngle();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.IEnumerableExtensionsTests");
                var test5 = new RT.Util.ExtensionMethods.IEnumerableExtensionsTests();
                Console.WriteLine("-- Running test: TestJoin");
                test5.TestJoin();
                Console.WriteLine("-- Running test: TestUniquePairs");
                test5.TestUniquePairs();
                Console.WriteLine("-- Running test: TestSorted");
                test5.TestSorted();
                Console.WriteLine("-- Running test: TestOrderTake");
                test5.TestOrderTake();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Geometry.IntersectTests");
                var test6 = new RT.Util.Geometry.IntersectTests();
                Console.WriteLine("-- Running test: LineWithCircle");
                test6.LineWithCircle();
                Console.WriteLine("-- Running test: RayWithCircle");
                test6.RayWithCircle();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.ListSortedTests");
                var test7 = new RT.Util.Collections.ListSortedTests();
                Console.WriteLine("-- Running test: TestA");
                test7.TestA();
                Console.WriteLine("-- Running test: TestB");
                test7.TestB();
                Console.WriteLine("-- Running test: TestC");
                test7.TestC();
                Console.WriteLine("-- Running test: TestD");
                test7.TestD();
                Console.WriteLine("-- Running test: TestF");
                test7.TestF();
                Console.WriteLine("-- Running test: TestG");
                test7.TestG();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.RConvertTests");
                var test8 = new RT.Util.RConvertTests();
                Console.WriteLine("-- Running test: TestExactToByte");
                test8.TestExactToByte();
                Console.WriteLine("-- Running test: TestExactToUShort");
                test8.TestExactToUShort();
                Console.WriteLine("-- Running test: TestExactToUInt");
                test8.TestExactToUInt();
                Console.WriteLine("-- Running test: TestExactToULong");
                test8.TestExactToULong();
                Console.WriteLine("-- Running test: TestExactToSByte");
                test8.TestExactToSByte();
                Console.WriteLine("-- Running test: TestExactToShort");
                test8.TestExactToShort();
                Console.WriteLine("-- Running test: TestExactToInt");
                test8.TestExactToInt();
                Console.WriteLine("-- Running test: TestExactToLong");
                test8.TestExactToLong();
                Console.WriteLine("-- Running test: TestExactToBool");
                test8.TestExactToBool();
                Console.WriteLine("-- Running test: TestExactToChar");
                test8.TestExactToChar();
                Console.WriteLine("-- Running test: TestExactToDateTime");
                test8.TestExactToDateTime();
                Console.WriteLine("-- Running test: TestExactToFloat");
                test8.TestExactToFloat();
                Console.WriteLine("-- Running test: TestExactToDouble");
                test8.TestExactToDouble();
                Console.WriteLine("-- Running test: TestExactToDecimal");
                test8.TestExactToDecimal();
                Console.WriteLine("-- Running test: TestExactToStringAndRoundtrip");
                test8.TestExactToStringAndRoundtrip();
                Console.WriteLine("-- Running test: QuickTestExactToType");
                test8.QuickTestExactToType();
                Console.WriteLine("-- Running test: TestNullable");
                test8.TestNullable();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.RVariantTests");
                var test9 = new RT.Util.Collections.RVariantTests();
                Console.WriteLine("-- Running setup: InitAll");
                test9.InitAll();
                Console.WriteLine("-- Running test: TestStub");
                test9.TestStub();
                Console.WriteLine("-- Running test: TestBasicValue");
                test9.TestBasicValue();
                Console.WriteLine("-- Running test: TestOneLevelDict");
                test9.TestOneLevelDict();
                Console.WriteLine("-- Running test: TestOneLevelList");
                test9.TestOneLevelList();
                Console.WriteLine("-- Running test: TestComplexAndCopying");
                test9.TestComplexAndCopying();
                Console.WriteLine("-- Running test: TestImplicitCastAndEquality");
                test9.TestImplicitCastAndEquality();
                Console.WriteLine("-- Running test: TestXmlAndComplexEquality");
                test9.TestXmlAndComplexEquality();
                Console.WriteLine("-- Running test: TestDefaultTo");
                test9.TestDefaultTo();
                Console.WriteLine("-- Running test: TestExceptions");
                test9.TestExceptions();
                Console.WriteLine("-- Running test: RealLifeTest");
                test9.RealLifeTest();
                Console.WriteLine("-- Running test: TestExists");
                test9.TestExists();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.SetTests");
                var test10 = new RT.Util.Collections.SetTests();
                Console.WriteLine("-- Running test: SetTests1");
                test10.SetTests1();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.StringExtensionsTests");
                var test11 = new RT.Util.ExtensionMethods.StringExtensionsTests();
                Console.WriteLine("-- Running test: TestJoin");
                test11.TestJoin();
                Console.WriteLine("-- Running test: TestRepeat");
                test11.TestRepeat();
                Console.WriteLine("-- Running test: TestEscape");
                test11.TestEscape();
                Console.WriteLine("-- Running test: TestTrivial");
                test11.TestTrivial();
                Console.WriteLine("-- Running test: TestSingleNoIndentation");
                test11.TestSingleNoIndentation();
                Console.WriteLine("-- Running test: TestMultiIndentedParagraphs");
                test11.TestMultiIndentedParagraphs();
                Console.WriteLine("-- Running test: TestBase64Url");
                test11.TestBase64Url();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.TupleTests");
                var test12 = new RT.Util.Collections.TupleTests();
                Console.WriteLine("-- Running test: TestComparison");
                test12.TestComparison();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Xml.XmlClassifyTests");
                var test13 = new RT.Util.Xml.XmlClassifyTests();
                Console.WriteLine("-- Running test: TestBlankClass");
                test13.TestBlankClass();
                Console.WriteLine("-- Running test: TestBasicClass");
                test13.TestBasicClass();
                Console.WriteLine("-- Running test: TestStringNull");
                test13.TestStringNull();
                Console.WriteLine("-- Running test: TestClassWithList");
                test13.TestClassWithList();
                Console.WriteLine("-- Running test: TestClassWithDict");
                test13.TestClassWithDict();
                Console.WriteLine("-- Running test: TestDictSubclass");
                test13.TestDictSubclass();
                Console.WriteLine("-- Running test: TestClassWithXml");
                test13.TestClassWithXml();
                Console.WriteLine("-- Running test: TestNestedClass");
                test13.TestNestedClass();
                Console.WriteLine("-- Running test: TestPartialLoad");
                test13.TestPartialLoad();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.XmlLinqExtensionsTests");
                var test14 = new RT.Util.ExtensionMethods.XmlLinqExtensionsTests();
                Console.WriteLine("-- Running setup: Setup");
                test14.Setup();
                Console.WriteLine("-- Running test: TestElementPath");
                test14.TestElementPath();
                Console.WriteLine("-- Running test: TestAttributePath");
                test14.TestAttributePath();
                Console.WriteLine("-- Running test: TestChkElement");
                test14.TestChkElement();
                Console.WriteLine("-- Running test: TestChkAttribute");
                test14.TestChkAttribute();
                Console.WriteLine("-- Running test: TestAsDouble");
                test14.TestAsDouble();
                #endregion

                Console.WriteLine("");
                Console.WriteLine("Tests passed; press Enter to exit.");
                Console.ReadLine();
            }
        }
    }
}
