using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RT.Util.ExtensionMethods;
using System.Reflection;
using NUnit.Framework;
using System.IO;
using System.Text.RegularExpressions;

namespace RT.Util
{
    static class UtilTests
    {
        static void Main(string[] args)
        {
            if (false)
            {
                Testing.GenerateTestingCode(@"..\..\main\common\Util\UtilTests.cs", "Run Tests", Assembly.GetExecutingAssembly().GetExportedTypes(),
                    typeof(TestFixtureAttribute), typeof(TestFixtureSetUpAttribute), typeof(TestAttribute), typeof(TestFixtureTearDownAttribute));
            }
            else
            {
                #region Run Tests
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.CollectionExtensionsTests");
                var doCollectionExtensionsTests = new RT.Util.ExtensionMethods.CollectionExtensionsTests();
                Console.WriteLine("-- Running test: TestBinarySearch");
                doCollectionExtensionsTests.TestBinarySearch();
                Console.WriteLine("-- Running test: TestAddSafe1");
                doCollectionExtensionsTests.TestAddSafe1();
                Console.WriteLine("-- Running test: TestAddSafe2");
                doCollectionExtensionsTests.TestAddSafe2();
                Console.WriteLine("-- Running test: TestIncSafe");
                doCollectionExtensionsTests.TestIncSafe();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.DateTimeExtensionsTests");
                var doDateTimeExtensionsTests = new RT.Util.ExtensionMethods.DateTimeExtensionsTests();
                Console.WriteLine("-- Running test: TestGetNanoseconds");
                doDateTimeExtensionsTests.TestGetNanoseconds();
                Console.WriteLine("-- Running test: TestToIsoStringUtc");
                doDateTimeExtensionsTests.TestToIsoStringUtc();
                Console.WriteLine("-- Running test: TestToIsoStringUnspecified");
                doDateTimeExtensionsTests.TestToIsoStringUnspecified();
                Console.WriteLine("-- Running test: TestToIsoStringLocal");
                doDateTimeExtensionsTests.TestToIsoStringLocal();
                Console.WriteLine("-- Running test: TestTryParseIsoUtc");
                doDateTimeExtensionsTests.TestTryParseIsoUtc();
                Console.WriteLine("-- Running test: TestTryParseIsoUnspecified");
                doDateTimeExtensionsTests.TestTryParseIsoUnspecified();
                Console.WriteLine("-- Running test: TestTryParseIsoLocal");
                doDateTimeExtensionsTests.TestTryParseIsoLocal();
                Console.WriteLine("-- Running test: TestTruncated");
                doDateTimeExtensionsTests.TestTruncated();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.UtTests.DiffTests");
                var doDiffTests = new RT.Util.UtTests.DiffTests();
                Console.WriteLine("-- Running test: DiffTest");
                doDiffTests.DiffTest();
                Console.WriteLine("-- Running test: DiffTestPredicate");
                doDiffTests.DiffTestPredicate();
                Console.WriteLine("-- Running test: DiffTestPostprocessor");
                doDiffTests.DiffTestPostprocessor();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Geometry.GeomUtTests");
                var doGeomUtTests = new RT.Util.Geometry.GeomUtTests();
                Console.WriteLine("-- Running test: TestNormalizedAngle");
                doGeomUtTests.TestNormalizedAngle();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.IEnumerableExtensionsTests");
                var doIEnumerableExtensionsTests = new RT.Util.ExtensionMethods.IEnumerableExtensionsTests();
                Console.WriteLine("-- Running test: TestJoin");
                doIEnumerableExtensionsTests.TestJoin();
                Console.WriteLine("-- Running test: TestUniquePairs");
                doIEnumerableExtensionsTests.TestUniquePairs();
                Console.WriteLine("-- Running test: TestSorted");
                doIEnumerableExtensionsTests.TestSorted();
                Console.WriteLine("-- Running test: TestOrderLazy");
                doIEnumerableExtensionsTests.TestOrderLazy();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Geometry.IntersectTests");
                var doIntersectTests = new RT.Util.Geometry.IntersectTests();
                Console.WriteLine("-- Running test: LineWithCircle");
                doIntersectTests.LineWithCircle();
                Console.WriteLine("-- Running test: RayWithCircle");
                doIntersectTests.RayWithCircle();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.ListSortedTests");
                var doListSortedTests = new RT.Util.Collections.ListSortedTests();
                Console.WriteLine("-- Running test: TestA");
                doListSortedTests.TestA();
                Console.WriteLine("-- Running test: TestB");
                doListSortedTests.TestB();
                Console.WriteLine("-- Running test: TestC");
                doListSortedTests.TestC();
                Console.WriteLine("-- Running test: TestD");
                doListSortedTests.TestD();
                Console.WriteLine("-- Running test: TestF");
                doListSortedTests.TestF();
                Console.WriteLine("-- Running test: TestG");
                doListSortedTests.TestG();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.RConvertTests");
                var doRConvertTests = new RT.Util.RConvertTests();
                Console.WriteLine("-- Running test: TestExactToByte");
                doRConvertTests.TestExactToByte();
                Console.WriteLine("-- Running test: TestExactToUShort");
                doRConvertTests.TestExactToUShort();
                Console.WriteLine("-- Running test: TestExactToUInt");
                doRConvertTests.TestExactToUInt();
                Console.WriteLine("-- Running test: TestExactToULong");
                doRConvertTests.TestExactToULong();
                Console.WriteLine("-- Running test: TestExactToSByte");
                doRConvertTests.TestExactToSByte();
                Console.WriteLine("-- Running test: TestExactToShort");
                doRConvertTests.TestExactToShort();
                Console.WriteLine("-- Running test: TestExactToInt");
                doRConvertTests.TestExactToInt();
                Console.WriteLine("-- Running test: TestExactToLong");
                doRConvertTests.TestExactToLong();
                Console.WriteLine("-- Running test: TestExactToBool");
                doRConvertTests.TestExactToBool();
                Console.WriteLine("-- Running test: TestExactToChar");
                doRConvertTests.TestExactToChar();
                Console.WriteLine("-- Running test: TestExactToDateTime");
                doRConvertTests.TestExactToDateTime();
                Console.WriteLine("-- Running test: TestExactToFloat");
                doRConvertTests.TestExactToFloat();
                Console.WriteLine("-- Running test: TestExactToDouble");
                doRConvertTests.TestExactToDouble();
                Console.WriteLine("-- Running test: TestExactToDecimal");
                doRConvertTests.TestExactToDecimal();
                Console.WriteLine("-- Running test: TestExactToStringAndRoundtrip");
                doRConvertTests.TestExactToStringAndRoundtrip();
                Console.WriteLine("-- Running test: QuickTestExactToType");
                doRConvertTests.QuickTestExactToType();
                Console.WriteLine("-- Running test: TestNullable");
                doRConvertTests.TestNullable();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.RVariantTests");
                var doRVariantTests = new RT.Util.Collections.RVariantTests();
                Console.WriteLine("-- Running setup: InitAll");
                doRVariantTests.InitAll();
                Console.WriteLine("-- Running test: TestStub");
                doRVariantTests.TestStub();
                Console.WriteLine("-- Running test: TestBasicValue");
                doRVariantTests.TestBasicValue();
                Console.WriteLine("-- Running test: TestOneLevelDict");
                doRVariantTests.TestOneLevelDict();
                Console.WriteLine("-- Running test: TestOneLevelList");
                doRVariantTests.TestOneLevelList();
                Console.WriteLine("-- Running test: TestComplexAndCopying");
                doRVariantTests.TestComplexAndCopying();
                Console.WriteLine("-- Running test: TestImplicitCastAndEquality");
                doRVariantTests.TestImplicitCastAndEquality();
                Console.WriteLine("-- Running test: TestXmlAndComplexEquality");
                doRVariantTests.TestXmlAndComplexEquality();
                Console.WriteLine("-- Running test: TestDefaultTo");
                doRVariantTests.TestDefaultTo();
                Console.WriteLine("-- Running test: TestExceptions");
                doRVariantTests.TestExceptions();
                Console.WriteLine("-- Running test: RealLifeTest");
                doRVariantTests.RealLifeTest();
                Console.WriteLine("-- Running test: TestExists");
                doRVariantTests.TestExists();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.SetTests");
                var doSetTests = new RT.Util.Collections.SetTests();
                Console.WriteLine("-- Running test: SetTests1");
                doSetTests.SetTests1();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.StringExtensionsTests");
                var doStringExtensionsTests = new RT.Util.ExtensionMethods.StringExtensionsTests();
                Console.WriteLine("-- Running test: TestJoin");
                doStringExtensionsTests.TestJoin();
                Console.WriteLine("-- Running test: TestRepeat");
                doStringExtensionsTests.TestRepeat();
                Console.WriteLine("-- Running test: TestEscape");
                doStringExtensionsTests.TestEscape();
                Console.WriteLine("-- Running test: TestTrivial");
                doStringExtensionsTests.TestTrivial();
                Console.WriteLine("-- Running test: TestSingleNoIndentation");
                doStringExtensionsTests.TestSingleNoIndentation();
                Console.WriteLine("-- Running test: TestMultiIndentedParagraphs");
                doStringExtensionsTests.TestMultiIndentedParagraphs();
                Console.WriteLine("-- Running test: TestBase64Url");
                doStringExtensionsTests.TestBase64Url();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Collections.TupleTests");
                var doTupleTests = new RT.Util.Collections.TupleTests();
                Console.WriteLine("-- Running test: TestComparison");
                doTupleTests.TestComparison();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.Xml.XmlClassifyTests");
                var doXmlClassifyTests = new RT.Util.Xml.XmlClassifyTests();
                Console.WriteLine("-- Running test: TestBlankClass");
                doXmlClassifyTests.TestBlankClass();
                Console.WriteLine("-- Running test: TestBasicClass");
                doXmlClassifyTests.TestBasicClass();
                Console.WriteLine("-- Running test: TestStringNull");
                doXmlClassifyTests.TestStringNull();
                Console.WriteLine("-- Running test: TestClassWithList");
                doXmlClassifyTests.TestClassWithList();
                Console.WriteLine("-- Running test: TestClassWithDict");
                doXmlClassifyTests.TestClassWithDict();
                Console.WriteLine("-- Running test: TestDictSubclass");
                doXmlClassifyTests.TestDictSubclass();
                Console.WriteLine("-- Running test: TestClassWithXml");
                doXmlClassifyTests.TestClassWithXml();
                Console.WriteLine("-- Running test: TestNestedClass");
                doXmlClassifyTests.TestNestedClass();
                Console.WriteLine("-- Running test: TestPartialLoad");
                doXmlClassifyTests.TestPartialLoad();
                Console.WriteLine("-- Running test: TestConstructors");
                doXmlClassifyTests.TestConstructors();
                Console.WriteLine("");
                Console.WriteLine("Testing type: RT.Util.ExtensionMethods.XmlLinqExtensionsTests");
                var doXmlLinqExtensionsTests = new RT.Util.ExtensionMethods.XmlLinqExtensionsTests();
                Console.WriteLine("-- Running setup: Setup");
                doXmlLinqExtensionsTests.Setup();
                Console.WriteLine("-- Running test: TestElementPath");
                doXmlLinqExtensionsTests.TestElementPath();
                Console.WriteLine("-- Running test: TestAttributePath");
                doXmlLinqExtensionsTests.TestAttributePath();
                Console.WriteLine("-- Running test: TestChkElement");
                doXmlLinqExtensionsTests.TestChkElement();
                Console.WriteLine("-- Running test: TestChkAttribute");
                doXmlLinqExtensionsTests.TestChkAttribute();
                Console.WriteLine("-- Running test: TestAsDouble");
                doXmlLinqExtensionsTests.TestAsDouble();
                #endregion

                Console.WriteLine("");
                Console.WriteLine("Tests passed; press Enter to exit.");
                Console.ReadLine();
            }
        }
    }
}
